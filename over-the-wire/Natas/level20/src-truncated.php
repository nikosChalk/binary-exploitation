
<?

function debug($msg) { /* {{{ */
    if(array_key_exists("debug", $_GET)) {
        print "DEBUG: $msg<br>";
    }
}
function myopen($path, $name) { return true; }
function myclose() {  return true;  }
function mydestroy($sid) {return true; }
function mygarbage($t) { return true; }

function print_credentials() { /* {{{ */
    if($_SESSION and array_key_exists("admin", $_SESSION) and $_SESSION["admin"] == 1) {
        print "You are an admin. The credentials for the next level are:<br>";
        print "<pre>Username: natas21\n";
        print "Password: <censored></pre>";
    } else {
        print "You are logged in as a regular user. Login as an admin to retrieve credentials for natas21.";
    }
}

function myread($sid) { 
    debug("MYREAD $sid"); 

    # strspn ( string $subject , string $mask [, int $start [, int $length ]] ) : int
    # Finds the length of the initial segment of subject that contains only characters from mask. 
    if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) { # [0-9a-zA-Z\-]
        debug("Invalid SID"); 
        return "";
    }
    $filename = session_save_path() . "/" . "mysess_" . $sid;
    if(!file_exists($filename)) {
        debug("Session file doesn't exist");
        return "";
    }
    debug("Reading from ". $filename);
    $data = file_get_contents($filename);
    # # File format:
    # <key1> <value1>
    # <key2> <value2>
    # ....
    #

    $_SESSION = array();
    foreach(explode("\n", $data) as $line) {
        debug("Read [$line]");
        $parts = explode(" ", $line, 2);
        if($parts[0] != "")
            $_SESSION[$parts[0]] = $parts[1];
    }
    return session_encode();
}

function mywrite($sid, $data) { 
    // $data contains the serialized version of $_SESSION
    // but our encoding is better
    debug("MYWRITE $sid $data"); 
    // make sure the sid is alnum only!!
    if(strspn($sid, "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM-") != strlen($sid)) {
        debug("Invalid SID");
        return;
    }
    $filename = session_save_path() . "/" . "mysess_" . $sid;
    $data = "";
    debug("Saving in ". $filename);
    ksort($_SESSION);
    foreach($_SESSION as $key => $value) {
        debug("$key => $value");
        $data .= "$key $value\n";
    }
    file_put_contents($filename, $data);
    chmod($filename, 0600);
}



# Sets user-level session storage functions
# used for storing and retrieving data associated with a session
#
# open - The open callback works like a constructor in classes and is executed when the session is being opened.
#  It is the first callback function executed when the session is started automatically or manually. Returns True for success.
#
# close - The close callback works like a destructor in classes and is executed after the session write callback has been called
#
# read(string $sessionId) - This callback is called internally by PHP when the session starts or when session_start() is called
# The read callback must always return a session encoded (serialized) string, or an empty string if there is no data to read. 
# The value returned will be unserialized automatically by PHP and used to populate the $_SESSION superglobal
#
# write ( string $sessionId , string $data )
# The write callback is called when the session needs to be saved and closed. This callback is invoked when PHP shuts down or when session_write_close() is called
# This callback receives the current session ID a serialized version the $_SESSION superglobal
#
# destroy - This callback is executed when a session is destroyed with session_destroy() or with session_regenerate_id() with the destroy parameter set to TRUE.
# Returns True for success
#
# gc - The garbage collector callback is invoked internally by PHP periodically in order to purge old session data. Returns True for success
session_set_save_handler(
    "myopen",   # open. Always returns True
    "myclose",  # close. Always returns True
    "myread",   # read
    "mywrite",  # write
    "mydestroy",# destroy. Always returns True
    "mygarbage" #gc. Always returns True
);


session_start();

if(array_key_exists("name", $_REQUEST)) {
    $_SESSION["name"] = $_REQUEST["name"];
    debug("Name set to " . $_REQUEST["name"]);
}

print_credentials();

$name = "";
if(array_key_exists("name", $_SESSION)) {
    $name = $_SESSION["name"];
}

?>

<form action="index.php" method="POST">
Your name: <input name="name" value="<?=$name?>"><br>
<input type="submit" value="Change name" />
</form>
