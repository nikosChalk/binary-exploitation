<?

$data1_original = array( "showpassword"=>"no", "bgcolor"=>"#ffffff");
$data1_cookie="ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw="; # %3D <==> '=' in URL encoding
$data1_plaintext = json_encode($data1_original);
$data1_ciphertext = base64_decode($data1_cookie);

function xor_str($a,$b) {
    $out = b'';
    assert(strlen($a) == strlen($b));

    // Iterate through each character
    for($i=0; $i<strlen($a); $i++) {
        $out .= $a[$i] ^ $b[$i];
    }

    return $out;
}

$repetitive_key = xor_str($data1_plaintext, $data1_ciphertext); # e.g. in hex: 0x7177384a7177384a7177384a7177384a7177384a7177384a7177384a7177384a7177384a7177384a71
$key_len = 4; # 4 Bytes
$key = substr($repetitive_key, 0, $key_len);
echo("repetitive key is: " . bin2hex($repetitive_key) . "\n");
echo("key is: " . bin2hex($key) . "\n");

function xor_encrypt($in) {
    global $key;
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
        $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

$pw_yes_data = array( "showpassword"=>"yes", "bgcolor"=>"#ffffff");
$pw_yes_cookie = base64_encode(xor_encrypt(json_encode($pw_yes_data)));
echo("Cookie for password reveal: " . $pw_yes_cookie . "\n");   # ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK

?>
