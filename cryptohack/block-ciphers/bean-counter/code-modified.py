

from Crypto.Cipher import AES
import os
KEY = b'????'

class StepUpCounter(object):
    def __init__(self, value=os.urandom(16)):
        self.value = value.hex()
        self.step = 1

    def increment(self):
        # Remove stupid coding mistake
        self.newIV = hex(int(self.value, 16))   # e.g. "0x32"
        self.value = self.newIV[2:len(self.newIV)]  # e.g. "32"
        # The zfill() method adds zeros (0) at the beginning of the string, until it reaches the specified length.
        # So it returns something like b'000...00032'
        return bytes.fromhex(self.value.zfill(32))

    def __repr__(self):
        self.increment()
        return self.value


def encrypt():
    cipher = AES.new(KEY, AES.MODE_ECB)
    ctr = StepUpCounter()

    out = []
    with open("challenge_files/bean_flag.png", 'rb') as f:
        block = f.read(16)
        while block:
            keystream = cipher.encrypt(ctr.increment()) # remains constant throught the loop
            xored = [a^b for a, b in zip(block, keystream)]
            out.append(bytes(xored).hex())
            block = f.read(16)

    return {"encrypted": ''.join(out)}

